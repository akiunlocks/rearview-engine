CodeMirror.defineMode("haskell",function(){function e(e,r,t){return r(t),t(e,r)}function r(r,a){if(r.eatWhile(m))return null;var h=r.next();if(d.test(h)){if("{"==h&&r.eat("-")){var p="comment";return r.eat("#")&&(p="meta"),e(r,a,t(p,1))}return null}if("'"==h)return r.eat("\\"),r.next(),r.eat("'")?"string":"error";if('"'==h)return e(r,a,n);if(o.test(h))return r.eatWhile(f),r.eat(".")?"qualifier":"variable-2";if(i.test(h))return r.eatWhile(f),"variable";if(l.test(h)){if("0"==h){if(r.eat(/[xX]/))return r.eatWhile(u),"integer";if(r.eat(/[oO]/))return r.eatWhile(s),"number"}r.eatWhile(l);var p="number";return r.eat(".")&&(p="number",r.eatWhile(l)),r.eat(/[eE]/)&&(p="number",r.eat(/[-+]/),r.eatWhile(l)),p}if(c.test(h)){if("-"==h&&r.eat(/-/)&&(r.eatWhile(/-/),!r.eat(c)))return r.skipToEnd(),"comment";var p="variable";return":"==h&&(p="variable-2"),r.eatWhile(c),p}return"error"}function t(e,n){return 0==n?r:function(a,i){for(var o=n;!a.eol();){var l=a.next();if("{"==l&&a.eat("-"))++o;else if("-"==l&&a.eat("}")&&(--o,0==o))return i(r),e}return i(t(e,o)),e}}function n(e,t){for(;!e.eol();){var n=e.next();if('"'==n)return t(r),"string";if("\\"==n){if(e.eol()||e.eat(m))return t(a),"string";e.eat("&")||e.next()}}return t(r),"error"}function a(t,a){return t.eat("\\")?e(t,a,n):(t.next(),a(r),"error")}var i=/[a-z_]/,o=/[A-Z]/,l=/[0-9]/,u=/[0-9A-Fa-f]/,s=/[0-7]/,f=/[a-z_A-Z0-9']/,c=/[-!#$%&*+.\/<=>?@\\^|~:]/,d=/[(),;[\]`{}]/,m=/[ \t\v\f]/,h=function(){function e(e){return function(){for(var t=0;t<arguments.length;t++)r[arguments[t]]=e}}var r={};return e("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),e("keyword")("..",":","::","=","\\",'"',"<-","->","@","~","=>"),e("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**"),e("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),e("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3"),r}();return{startState:function(){return{f:r}},copyState:function(e){return{f:e.f}},token:function(e,r){var t=r.f(e,function(e){r.f=e}),n=e.current();return n in h?h[n]:t}}}),CodeMirror.defineMIME("text/x-haskell","haskell");